#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define INF INT_MAX
#define MAX_VERTICES 100

// Function to find the vertex with the minimum distance
int minDistance(int dist[], int sptSet[], int V) 
{
    int min = INF, minIndex;
    for (int v = 0; v < V; v++) 
    {
        if (sptSet[v] == 0 && dist[v] <= min) 
        {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to print the shortest paths
void printSolution(int dist[], int V) 
{
    printf("Vertex Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}

// Function to implement Dijkstra's algorithm using adjacency matrix
void shortestPath(int graph[MAX_VERTICES][MAX_VERTICES], int src, int V) 
{
    int dist[V];
    int sptSet[V];

    // Initialize distances and sptSet
    for (int i = 0; i < V; i++)
    {
        dist[i] = INF;
        sptSet[i] = 0;
    }

    // Distance from source to itself is always 0
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) 
    {
        int u = minDistance(dist, sptSet, V);
        sptSet[u] = 1;

        for (int v = 0; v < V; v++) 
        {
            if (!sptSet[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) 
            {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printSolution(dist, V);
}

// Driver program to test Dijkstra's algorithm
int main() {
    int V = 7;
    int graph[MAX_VERTICES][MAX_VERTICES] = 
    {
        {0, 2, 6, 0, 0, 0, 0},
        {2, 0, 0, 5, 0, 0, 0},
        {6, 0, 0, 8, 0, 0, 0},
        {0, 5, 8, 0, 10, 15, 0},
        {0, 0, 0, 10, 0, 0, 2},
        {0, 0, 0, 15, 0, 0, 6},
        {0, 0, 0, 0, 2, 6, 0}
    };

    shortestPath(graph, 0, V);

    return 0;
}
