/* DAA LAB 8 28 SEPTEMBER 2024
Program to implement huffman coding algorithm
*/


#include <stdio.h>
#include <stdlib.h>

struct MinHeapNode 
{
    char data;
    unsigned freq;
    struct MinHeapNode *left, *right;
};

struct MinHeap 
{
    unsigned size, capacity;
    struct MinHeapNode **array;
};

struct MinHeapNode* newNode(char data, unsigned freq) 
{
    struct MinHeapNode* temp = malloc(sizeof(struct MinHeapNode));
    temp->data = data; temp->freq = freq; temp->left = temp->right = NULL;
    return temp;
}

struct MinHeap* createMinHeap(unsigned capacity) 
{
    struct MinHeap* minHeap = malloc(sizeof(struct MinHeap));
    minHeap->size = 0; minHeap->capacity = capacity;
    minHeap->array = malloc(capacity * sizeof(struct MinHeapNode*));
    return minHeap;
}

void swap(struct MinHeapNode** a, struct MinHeapNode** b) 
{
    struct MinHeapNode* t = *a; *a = *b; *b = t;
}

void minHeapify(struct MinHeap* heap, int idx) 
{
    int smallest = idx, left = 2 * idx + 1, right = 2 * idx + 2;
    if (left < heap->size && heap->array[left]->freq < heap->array[smallest]->freq) 
    smallest = left;
    if (right < heap->size && heap->array[right]->freq < heap->array[smallest]->freq) 
    smallest = right;
    if (smallest != idx) 
    { 
        swap(&heap->array[smallest], &heap->array[idx]); minHeapify(heap, smallest); 
    }
}

struct MinHeapNode* extractMin(struct MinHeap* heap) 
{
    struct MinHeapNode* temp = heap->array[0];
    heap->array[0] = heap->array[--heap->size];
    minHeapify(heap, 0);
    return temp;
}

void insertMinHeap(struct MinHeap* heap, struct MinHeapNode* node) {
    int i = heap->size++;
    while (i && node->freq < heap->array[(i - 1) / 2]->freq) 
    {
        heap->array[i] = heap->array[(i - 1) / 2]; i = (i - 1) / 2;
    }
    heap->array[i] = node;
}

struct MinHeap* createAndBuildMinHeap(char data[], int freq[], int size) 
{
    struct MinHeap* minHeap = createMinHeap(size);
    for (int i = 0; i < size; i++) minHeap->array[i] = newNode(data[i], freq[i]);
    minHeap->size = size; for (int i = (size - 1) / 2; i >= 0; i--) minHeapify(minHeap, i);
    return minHeap;
}

struct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size) 
{
    struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size);
    while (minHeap->size > 1) 
    {
        struct MinHeapNode *left = extractMin(minHeap), *right = extractMin(minHeap);
        struct MinHeapNode* top = newNode('$', left->freq + right->freq);
        top->left = left; top->right = right; insertMinHeap(minHeap, top);
    }
    return extractMin(minHeap);
}

void printCodes(struct MinHeapNode* root, int arr[], int top) 
{
    if (root->left) 
    { 
        arr[top] = 0; printCodes(root->left, arr, top + 1); 
    }
    if (root->right) 
    { 
        arr[top] = 1; printCodes(root->right, arr, top + 1); 
    }
    if (!(root->left) && !(root->right)) 
    {
        printf("%c: ", root->data); for (int i = 0; i < top; i++) printf("%d", arr[i]); printf("\n");
    }
}

void HuffmanCodes(char data[], int freq[], int size) 
{
    struct MinHeapNode* root = buildHuffmanTree(data, freq, size);
    int arr[100], top = 0; printCodes(root, arr, top);
}

int main() 
{
    char arr[] = {'a', 'b', 'c', 'd', 'e', 'f'};
    int freq[] = {5, 9, 12, 13, 16, 45};
    HuffmanCodes(arr, freq, sizeof(arr) / sizeof(arr[0]));
    return 0;
}



OUTPUT:

f: 0
c: 100
d: 101
a: 1100
b: 1101
e: 111
