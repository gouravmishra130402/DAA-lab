/*DAA LAB 9 16 October 2024
Program 2 : Write a program to implement Prim's algorithm using a min heap to find MCST of any random graph.
*/

#include <limits.h>
#include <stdbool.h>
#include <stdio.h>

#define V 5 // Number of vertices

// Function to find the vertex with the minimum key value
int minKey(int key[], bool mstSet[]) 
{
    int min = INT_MAX, min_index = -1;
    for (int v = 0; v < V; v++) 
    {
        if (!mstSet[v] && key[v] < min) 
        {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the constructed MST
void printMST(int parent[], int graph[V][V]) 
{
    printf("Edge \tWeight\n");
    for (int i = 1; i < V; i++) {
        printf("%d - %d \t%d\n", parent[i], i, graph[i][parent[i]]);
    }
}

// Function to construct and print MST
void primMST(int graph[V][V]) 
{
    int parent[V], key[V];
    bool mstSet[V] = {false};

    for (int i = 0; i < V; i++) 
    {
        key[i] = INT_MAX; // Initialize all keys as INFINITE
        mstSet[i] = false; // Initialize MST set
    }

    key[0] = 0; // Start from the first vertex
    parent[0] = -1; // First node is always root of MST

    for (int count = 0; count < V - 1; count++) 
    {
        int u = minKey(key, mstSet); // Pick the minimum key vertex
        mstSet[u] = true; // Add it to the MST set

        for (int v = 0; v < V; v++) 
        {
            // Update key and parent if necessary
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) 
            {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    printMST(parent, graph); // Print the constructed MST
}

// Driver's code
int main() 
{
    int graph[V][V] = 
    {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };

    primMST(graph); // Execute Prim's algorithm
    return 0;
}



OUTPUT:

Edge 	Weight
0 - 1 	2
1 - 2 	3
0 - 3 	6
1 - 4 	5
